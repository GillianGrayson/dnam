# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=mnist_optuna experiment=example

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "mean_absolute_error"
optimized_mean: "cv_mean" # "cv_mean_val_tst"

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: null

    # number of parallel workers
    n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: minimize

    # total number of runs that will be executed
    n_trials: 1000

    # choose Optuna hyperparameter sampler
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: ${seed}
      consider_prior: true
      prior_weight: 1.0
      consider_magic_clip: true
      consider_endpoints: false
      n_startup_trials: 128
      n_ei_candidates: 16
      multivariate: false
      warn_independent_sampling: true

    # define range of hyperparameters
    params:
      pytorch_tabular_tabnet.optimizer_lr: tag(log, interval(0.0001, 1)) # tag(log, interval(0.00001, 1))
      pytorch_tabular_tabnet.optimizer_weight_decay: tag(log, interval(0.0000001, 0.01)) # tag(log, interval(0.00000001, 0.1))
      pytorch_tabular_tabnet.n_d: choice(8, 12, 16, 20) # pytorch_tabular_tabnet.n_d: choice(8, 16)
      pytorch_tabular_tabnet.n_a: choice(8, 12, 16, 20) # choice(8, 16)
      pytorch_tabular_tabnet.n_steps: choice(2, 3, 4) # choice(3, 4, 5)
      pytorch_tabular_tabnet.gamma: interval(1.1, 1.5) # interval(1.1, 1.5)
      pytorch_tabular_tabnet.n_independent: choice(1, 2, 3, 4) # choice(1, 2, 3)
      pytorch_tabular_tabnet.n_shared: choice(1, 2, 3) # choice(1, 2, 3)
      pytorch_tabular_tabnet.mask_type: choice(sparsemax, entmax) # choice(sparsemax, entmax)
