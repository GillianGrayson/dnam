# @package _global_

data_type: snp_sphy
model_type: tabnet # node tab_transformer tabnet
outcome: "SNP9" # SNP9 SNP12 SNPCol SNPMTHFR SNPApoB

in_dim: 1 # Will be corrected
out_dim: 3

project_name: ${data_type}_${outcome}_trn_val_${model_type}

seed: 42

cv_is_split: True
cv_n_splits: 5
cv_n_repeats: 1

optimized_metric: "f1_score_weighted"
optimized_part: "val"
direction: "max"

is_shuffle: False

debug: False
print_config: True
ignore_warnings: True
test_after_training: True

max_epochs: 10000
patience: 300

base_dir: "E:/YandexDisk/Work/pydnameth/datasets/GPL21145/GSEUNN/special/022_ml_data_cardio/${data_type}"
work_dir: "${base_dir}/models/${project_name}"
data_dir: "${base_dir}"

# SHAP values
is_shap: True
is_shap_save: False
shap_explainer: Kernel # Tree Kernel Deep
shap_bkgrd: trn # trn all tree_path_dependent

# LIME weights
is_lime: True
lime_bkgrd: trn # trn all
lime_num_features: all # 10 all
lime_save_weights: True

# Plot params
num_top_features: 10
num_examples: 1

# specify here default training configuration
defaults:
  - _self_
  - override /datamodule: null
  - override /trainer: default.yaml # choose trainer from 'configs/trainer/'
  - override /model: null
  - override /callbacks: regular.yaml
  - override /logger: many_loggers.yaml # set logger here or use command line (e.g. `python run.py logger=wandb`)
  - override /hydra/hydra_logging: colorlog
  - override /hydra/job_logging: colorlog

datamodule:
  _target_: src.datamodules.unn.UNNDataModuleNoTest
  task: "multiclass"
  features_fn: "${data_dir}/features_sphy_cont.xlsx"
  cat_features_fn: ""
  cat_encoding: ""
  classes_fn: "${data_dir}/classes/${outcome}.xlsx"
  trn_val_fn: "${data_dir}/data.xlsx"
  outcome: ${outcome}
  batch_size: 64
  trn_val_split: [0.80, 0.20]
  num_workers: 0
  pin_memory: False
  seed: ${seed}
  weighted_sampler: True
  imputation: fast_knn
  k: 1

trainer:
  gpus: 1
  min_epochs: 1
  max_epochs: ${max_epochs}
  weights_summary: null
  progress_bar_refresh_rate: 10
  resume_from_checkpoint: null

model:
  type: ${model_type}

tabnet:
  _target_: src.models.tabnet.model.TabNetModel
  task: "classification"
  loss_type: "CrossEntropyLoss"
  input_dim: ${in_dim}
  output_dim: ${out_dim}
  optimizer_lr: 0.005
  optimizer_weight_decay: 0.0
  scheduler_step_size: 100
  scheduler_gamma: 0.9
  n_d_n_a: 8
  n_steps: 3
  gamma: 1.3
  n_independent: 1
  n_shared: 2
  virtual_batch_size: 128
  mask_type: "sparsemax"

node:
  _target_: src.models.node.model.NodeModel
  task: "classification"
  loss_type: "CrossEntropyLoss"
  input_dim: ${in_dim}
  output_dim: ${out_dim}
  optimizer_lr: 0.5
  optimizer_weight_decay: 0.0
  scheduler_step_size: 50
  scheduler_gamma: 0.9
  num_trees: 1024
  num_layers: 1
  flatten_output: False
  depth: 6

tab_transformer:
  _target_: src.models.tab_transformer.model.TabTransformerModel
  task: "classification"
  loss_type: "CrossEntropyLoss"
  input_dim: ${in_dim}
  output_dim: ${out_dim}
  optimizer_lr: 0.001
  optimizer_weight_decay: 0.0
  scheduler_step_size: 50
  scheduler_gamma: 0.9
  categories: None
  num_continuous: None
  dim: 32
  depth: 6
  heads: 8
  dim_head: 16
  mlp_hidden_mults: [4, 2]
  num_special_tokens: 0
  attn_dropout: 0.0
  ff_dropout: 0.0

callbacks:
  model_checkpoint:
    monitor: "val/${optimized_metric}_pl" # name of the logged metric which determines when model is improving
    mode: ${direction} # can be "max" or "min"
    save_top_k: 1 # save k best models (determined by above metric)
    save_last: False # additionaly always save model from last epoch
    verbose: False
    dirpath: ""
    filename: "best"
    auto_insert_metric_name: False

  early_stopping:
    monitor: "val/${optimized_metric}_pl" # name of the logged metric which determines when model is improving
    mode: ${direction} # can be "max" or "min"
    patience: ${patience} # how many epochs of not improving until training stops
    min_delta: 0 # minimum change in the monitored metric needed to qualify as an improvement
