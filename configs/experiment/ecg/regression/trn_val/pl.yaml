# @package _global_

data_type: snp_sphy
model_type: tabnet
outcome: "Age"

project_name: ${data_type}_trn_val_${model_type}

seed: 42

in_dim: 35
out_dim: 1

cv_is_split: True
cv_n_splits: 5
cv_n_repeats: 1

optimized_metric: "mean_absolute_error"
optimized_part: "val"
direction: "min"

is_shuffle: False

debug: False
print_config: True
ignore_warnings: True
test_after_training: True

max_epochs: 10000
patience: 100

base_dir: "E:/YandexDisk/Work/pydnameth/datasets/GPL21145/GSEUNN/special/022_ml_data_cardio/${data_type}"
work_dir: "${base_dir}/models/${project_name}"
data_dir: "${base_dir}"

is_shap: False
shap_explainer: Kernel

# Plot params
num_top_features: 10
num_examples: 5

# specify here default training configuration
defaults:
  - override /datamodule: null
  - override /trainer: default.yaml # choose trainer from 'configs/trainer/'
  - override /model: null
  - override /callbacks: regular.yaml
  - override /logger: many_loggers.yaml # set logger here or use command line (e.g. `python run.py logger=wandb`)
  - override /hydra/hydra_logging: colorlog
  - override /hydra/job_logging: colorlog

datamodule:
  _target_: src.datamodules.unn.UNNDataModuleNoTest
  task: "regression"
  features_fn: "${data_dir}/features.xlsx"
  cat_features_fn: "${data_dir}/cat_features.xlsx"
  cat_encoding: "one_hot"
  classes_fn: ""
  trn_val_fn: "${data_dir}/data.xlsx"
  outcome: ${outcome}
  batch_size: 64
  trn_val_split: [0.80, 0.20]
  num_workers: 0
  pin_memory: False
  seed: ${seed}
  weighted_sampler: True
  imputation: fast_knn
  k: 1

trainer:
  gpus: 1
  min_epochs: 1
  max_epochs: ${max_epochs}
  weights_summary: null
  progress_bar_refresh_rate: 10
  resume_from_checkpoint: null

model:
  type: ${model_type}

model_tabnet:
  _target_: src.models.tabnet.model.TabNetModel
  task: "regression"
  input_dim: ${in_dim}
  output_dim: ${out_dim}
  n_d_n_a: 8
  n_steps: 3
  gamma: 1.3
  n_independent: 1
  n_shared: 2
  virtual_batch_size: 128
  mask_type: "sparsemax"
  loss_type: "L1Loss"
  optimizer_lr: 0.005
  optimizer_weight_decay: 0.0
  scheduler_step_size: 100
  scheduler_gamma: 0.9

model_node:
  _target_: src.models.node.model.NodeModel
  task: "regression"
  input_dim: ${in_dim}
  output_dim: ${out_dim}
  num_trees: 1024
  num_layers: 1
  flatten_output: False
  depth: 5
  loss_type: "L1Loss"
  optimizer_lr: 0.001
  optimizer_weight_decay: 0.0
  scheduler_step_size: 30
  scheduler_gamma: 0.9

callbacks:
  model_checkpoint:
    monitor: "val/MeanAbsoluteError" # name of the logged metric which determines when model is improving
    mode: "min" # can be "max" or "min"
    save_top_k: 1 # save k best models (determined by above metric)
    save_last: False # additionaly always save model from last epoch
    verbose: False
    dirpath: ""
    filename: "best"
    auto_insert_metric_name: False

  early_stopping:
    monitor: "val/MeanAbsoluteError" # name of the logged metric which determines when model is improving
    mode: "min" # can be "max" or "min"
    patience: ${patience} # how many epochs of not improving until training stops
    min_delta: 0 # minimum change in the monitored metric needed to qualify as an improvement
